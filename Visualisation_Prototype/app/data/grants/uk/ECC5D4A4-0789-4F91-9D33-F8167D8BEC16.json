{"id":"ECC5D4A4-0789-4F91-9D33-F8167D8BEC16","title":"SEBASE: Software Engineering By Automated SEarch","abstractText":"Current software engineering practice is a human-led search for solutions which meet needs and constraints under limited resources. Often there will be conflict, both between and within functional and non-functional criteria. Naturally, like other engineers, we search for a near optimal solution. As systems get bigger, more distributed, more dynamic and more critical, this labour-intensive search will hit fundamental limits. We will not be able to continue to develop, operate and maintain systems in the traditional way, without automating or partly automating the search for near optimal solutions. Automated search based solutions have a track record of success in other engineering disciplines, characterised by a large number of potential solutions, where there are many complex, competing and conflicting constraints and where construction of a perfect solution is either impossible or impractical. The SEMINAL network demonstrated that these techniques provide robust, cost-effective and high quality solutions for several problems in software engineering. Successes to date can be seen as strong pointers to search having great potential to serve as an overarching solution paradigm. The SEBASE project aims to provide a new approach to the way in which software engineering is understood and practised. It will move software engineering problems from human-based search to machine-based search. As a result, human effort will move up the abstraction chain, to focus on guiding the automated search, rather than performing it. This project will address key issues in software engineering, including scalability, robustness, reliability and stability. It will also study theoretical foundations of search algorithms and apply the insights gained to develop more effective and efficient search algorithms for large and complex software engineering problems. Such insights will have a major impact on the search algorithm community as well as the software engineering community.","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/D050618/1","grantId":"EP/D050618/1","fundValue":"784416","fundStart":"2006-06-28","fundEnd":"2011-12-27","funder":"EPSRC","impactText":"  Our testing work has been applied in a CDE project funded by DSTL (2012).\n\nWe are at early stages at the moment with further exploitation. Some of the work has already been proposed to DSTL (included in October 2014) with a view to testing multicore systems using search based approaches. Our work continued under the current DAASE Propgramme Grant. Aerospace, Defence and Marine,Digital/Communication/Information Technologies (including Software) Economic","person":"John Andrew Clark","coPersons":["Iain  Bate","Simon Marcus Poulding"],"organisation":"University of York","findingsText":" The principal findings from York's work are given below. We have shown that metaheuristic search is an important and potentially very powerful technique for solving a variety of problems in software engineering: \n\na) It can be used to evolve programs with multiple success criteria, e.g. we can engineer tradeoffs between functional criteria and non-functional criteria. Low resource programs can be attained at the cost of functional 'correctness'. Search techniques can find improvements to programs, e.g. making changes that bring about better performance whilst preserving semantics.\n\nb) It is possible to use evolutionary computation to find test sequences in concurrent models that find faults.\n\nc) Search based approaches can be used to synthesise real time systems architectures that meet all timing requirements and which are also resilient to future change.\n\nd) Search based approaches can be used to synthesise test data strategies meeting a variety of criteria.\n\ne) Search based approaches can be used to evolve programs that define high performing RF pulse sequences (for NMR spectroscopy).\n\nf) Search based approaches can be used to synthesise probabilistic algorithms (couched in the PRISM notation) that trade off multiple criteria.\n\ng) We defined a new means of tuning optimisation algorithms with reference to extant experimental usage elsewhere, in particular using response surface methodologies.\n\nh) The demonstration (winning best paper at GECCO 2011 SBSE) of how genetic programming and mutation testing can \ncombine to automatically synthesise useful (and indeed characteristic) invariants. This involves testing putative invariants by evaluating them on the original and also mutant programs. If a synthesised candidate invariant holds only on the original it is deemed to capture something very special and intrinsic to that program. \n\ni) A demonstration that search can be used to falsify automatically generated candidate invariants that are not actually true. (Several techniques generate candidates that are consistent with all test traces seen. This does not mean that they are actually invariants; they need to be eliminated. )\n\nj) A rigorous evaluation of the role played by crossover and mutation in genetic programming. There is a good deal to exploit. Academically we are already doing so via the DAASE Programme Grant (with UCL, Birmingham and Stirling).\n\nThe work can be applied to stress testing in general, with some application to security stress testing.\n\nWe believe our work lays the foundations for eventual applications in multicore testing (e.g. showing that search can severely stress underlying latencies of interconnect fabric use).\n\nFurther application to automated invariant synthesis would seem a likely promising candidate for further investigation. We are conscious that our mutation inspired notion of determining characteristicness is only one possible approach; others can surely be found. Aerospace, Defence and Marine,Digital/Communication/Information Technologies (including Software),Security and Diplomacy","dataset":"gtr"}