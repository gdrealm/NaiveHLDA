{"id":"1BFD709D-3DFF-4C1B-9AB8-F606B585D731","title":"COALGEBRAIC LOGIC PROGRAMMING FOR TYPE INFERENCE: Parallelism and Corecursion for New Generation of Programming Languages","abstractText":"The main goal of typing is to prevent the occurrence of execution errors during the running of a program. \nMilner formalised the idea, showing that ``well-typed programs cannot go wrong''. In practice, type structures provide a fundamental technique of reducing programmer errors. At their strongest, they cover most of the properties of interest to the verification community.\n\nA major trend in the development of functional languages is improvement in expressiveness of the underlying type system, e.g., in terms of Dependent Types, Type Classes, Generalised Algebraic Types (GADTs), Dependent Type Classes and Canonical Structures. Milner-style decidable type inference does not always suffice for such extensions (e.g. the principal type may no longer exist), and deciding well-typedness sometimes requires computation additional to compile-time type inference.\n\nImplementations of new type inference algorithms include a variety of first-order decision procedures, notably Unification and Logic Programming (LP), Constraint LP, LP embedded into interactive tactics (Coq's eauto), and LP supplemented by rewriting.\n\nRecently, a strong claim has been made by Gonthier et al that, for richer type systems, LP-style type inference is more efficient and natural than traditional tactic-driven proof development.\n\nA second major trend is parallelism: the absence of side-effects makes it easy to evaluate sub-expressions in parallel. Powerful abstraction mechanisms of function composition and higher-order functions play important roles in parallelisation. Three major parallel languages are Eden (explicit parallelism) Parallel ML (implicit parallelism) and Glasgow parallel Haskell (semi-explicit parallelism). Control parallelism in particular distinguishes functional languages.\n\nType inference and parallelism are rarely considered together in the literature. As type inference becomes more sophisticated and takes a bigger role in the overall program development, sequential type inference is bound to become a bottle-neck for language parallelisation.\n\nOur new Coalgebraic Logic Programming (CoALP) offers both extra expressiveness (corecursion) and parallelism in one algorithm. We propose to use CoALP in place of LP tools currently used in type inference.\n\nWith the mentioned major developments in Corecursion, Parallelism, and Typeful (functional) programming it has become vital for these disjoint communities to combine their efforts: enriched type theories rely more and more on the new generation of LP languages; coalgebraic semantics has become influential in language design; and parallel dialects of languages have huge potential in applying common techniques across the FP/LP programming paradigm. This project is unique in bringing together local and international collaborators working in the three communities. The number of\nsupporters the project has speaks better than words about the timeliness of our agenda.\n\n\nThe project will impact on two streams of EPSRC's strategic plan: &quot;Programming Languages and Compilers&quot; and &quot;Verification and Correctness&quot;. The project is novel in aspects of Theory (coalgebraic study of (co)recursive computations arising in automated proof-search); Practice (implementation of the new language CoALP and its embedding in type-inference tools); and Methodology (Mixed corecursion and parallelism).","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/K031864/1","grantId":"EP/K031864/1","fundValue":"280590","fundStart":"2013-09-01","fundEnd":"2016-02-29","funder":"EPSRC","impactText":"  We used our findings to produce a better implementation of Coalgebraic Logic Programming. Digital/Communication/Information Technologies (including Software) Economic","person":"Ekaterina  Komendantskaya","coPersons":[],"organisation":"University of Dundee","findingsText":" The grant is still in progress.\n\nIn this first year, we studied the properties and extensions of coalgebraic logic programming. In particular:\n\n- its parallel derivation algorithms;\n- recursive and corecursive derivation algorithms;\n- we formulated a more general opertaional semantics for untyped recursion and corecursion in first-order logic;\n- we continued to implement CoALP We see academic impact of this work in future applications of CoALP to type inference. Digital/Communication/Information Technologies (including Software)","dataset":"gtr"}