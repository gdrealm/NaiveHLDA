{"id":"0929B249-9067-4908-B121-6C31264D3CB3","title":"Partial order semantics for concurrent program verification","abstractText":"Multiprocessor machines are now predominant, as most laptops, desktops,\nservers, mobile phones and aircrafts routinely have multiple to many cores.\nUnfortunately, concurrent programming is error-prone, which now affects\neveryone given this trend towards more and more concurrency.\n\nLet us mention for example a recent concurrency bug found in the PostgreSQL\ndatabase (see\nhttp://archives.postgresql.org/pgsql-hackers/2011-08/msg00330.php). PostgreSQL\nis one of the most popular database nowadays, and many websites rely on its\ncorrect functioning. This bug was particularly difficult to observe (and\nindeed is not fixed yet) because it only occurred on a multicore machine, and a\nparticular hardware platform, IBM Power.\n\nReproducing such bugs is as hard as observing them; thus testing can hardly\ndiscover them. To prove a program free of errors, we would like to devise\nautomated techniques that analyse the code without executing it. Thus,\nwe can relieve programmers from the burden of writing the proofs of their\nprograms.\n\nYet, automatic verification of concurrent programs represents a challenge,\nwhether it aims at proving the full correctness of a program (e.g. a\nprogram sorting a list actually sorts the list), or at checking specific\nproperties (e.g. the program is free of data races) short of full\ncorrectness. We focus here on the latter: we would like to enhance\nthe scalability of tools checking that a concurrent program does not violate\ncertain safety-critical properties of interest.\n\nWe would like to show that scalable automatic verification can be achieved by\nexploiting the rich history of partial orders for modeling concurrency.","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/K039431/1","grantId":"EP/K039431/1","fundValue":"97999","fundStart":"2014-02-26","fundEnd":"2016-02-25","funder":"EPSRC","impactText":"  Since my PhD (awarded 2010) My research and tools have applied to products by IBM, and ARM amongst others. \n\nMore recently, I spent the summer of 2014 at Nvidia Redmond and Santa Clara, directly applying the results of my research to their products. Together with my student Tyler Sorensen and my colleague Mark Batty from Cambridge, we developed a model for a future Nvidia chip. I am currently writing their documentation, which demonstrates an incredible impact:\nthis whole line of work precisely started because the documentations for these chips were severely flawed. This shows that my line of research has reached the\npoint where we are able to repair the flaws that initiated it. Digital/Communication/Information Technologies (including Software),Electronics Economic","person":"Jade  Alglave","coPersons":[],"organisation":"University College London","findingsText":" I have developed extensions of my work on CPU chips that now apply to GPU chips and programming languages. These extensions have been instrumental during my visit to Nvidia during the summer of 2014 (see &quot;Secondments&quot;). Our findings are embodied in tools which are available on the web. Moreover we have already applied them successfully at Nvidia this summer. Digital/Communication/Information Technologies (including Software),Education,Electronics,Energy,Environment,Manufacturing, including Industrial Biotechology","dataset":"gtr"}