{"id":"57C43A51-C7F2-423D-9B11-B59A7D142F42","title":"GGGP: Grow and Graft Genetic Programming","abstractText":"Programming is hard. Adding new functionality to an existing, large, and perhaps poorly-understood system is a challenge, even for the most competent human programmer. Despite much progress in software development environments, programming still includes many human activities that are dull, unproductive and tedious. The GGGP project is motivated by the frustration often expressed as questions such as &quot;Why do software engineers spend so long repeatedly performing the same tedious low level software development tasks?&quot; and &quot;How many times do programmers work out how to express the idea of null pointer checking in a particular context or adapt existing code for searching an iterated data structure?&quot;\n \nWe want to find a radically new approach to software development, supported by automated search that, we believe, will yield a dramatic reduction in development time. We propose a new approach to software development: Grow and Graft Genetic Programming (GGGP), in which a new feature is grown (using genetic programming) and subsequently grafted into an existing system. This grow and graft development approach aims to reduce the amount of tedious effort required by human programmer in order to develop and add new functionality into an existing system.\n\nOur initial proof of concept work found that surprisingly little human guidance and domain knowledge is required from the programmer to guide Grow and Graft Genetic Programming. We therefore believe that it can radically change programming, \nmaking it faster and less error prone, with a consequent transformative effect on the software industry. We also believe it may make it more enjoyable to a wider range of people, with potentially transformative impact on the wider public involvement in \n(and understanding of) software development.\n\nOur approach can be best understood in the context of the recent trend in Search Based Software Engineering (SBSE) called &quot;genetic improvement&quot;, which uses existing code as &quot;genetic material&quot; that helps to automatically improve existing software systems, which has achieved several recent notable breakthroughs, such as speed ups of 7 to 70 times on real-world systems, human competitive results in optimising constraint solvers, and automated bug fixing and repair work on existing systems.","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/M025853/1","grantId":"EP/M025853/1","fundValue":"581560","fundStart":"2015-10-28","fundEnd":"2019-10-27","funder":"EPSRC","impactText":"","person":"Mark  Harman","coPersons":[],"organisation":"University College London","findingsText":"","dataset":"gtr"}