{"id":"EF929960-6ACD-4660-A35F-85843F5ED6A8","title":"Scalable Automatic Verification of GPU Kernels","abstractText":"Until relatively recently the processing speed of computer systems increased at an exponential rate. Each year it was possible to use computers to solve computational problems that the previous year were out of reach. Around 2005, physical limits stopped this trend: it became infeasible to increase the clock rate of a processor without consuming an exorbitant amount of energy. To counter this, processor manufacturers have since aimed to provide increased performance by designing &quot;multicore&quot; processors, which consist of two or more processing units on a chip. Many computational tasks are parallelisable, in which case they can be distributed across the cores of a multicore processor.\n\nRecently there has been a trend towards &quot;many-core&quot; processors, with hundreds or thousands of processing elements. For highly parallel applications, many-core processors can offer a massive speedup. The most readily available many-core processors are graphics processing units (GPUs) from companies such as NVIDIA, AMD, Intel, ARM and Imagination Technologies. GPUs were originally designed to accelerate graphical computations, but have become sufficiently general purpose for accelerating computational tasks in a variety of domains, including financial analysis, medical imaging, media processing and simulation.\n\nGPUs are programmed by writing a &quot;kernel&quot; function, a program which will be executed by hundreds or thousands of threads running in parallel on the GPU. Parallel threads can communicate using shared memory, and synchronise using barrier statements. Writing correct GPU kernels is more challenging than writing sequential software due to two main problems: data races and barrier divergence. A data race occurs when two GPU threads access a shared memory location, at least one of the threads modifies this location, and no barrier statement separates the accesses. Data races almost always signify bugs in the kernel and lead to nondeterministic behaviour. Barrier divergence occurs when distinct threads reach different barrier statements in the kernel, and leads to deadlock.\n\nBecause GPUs are becoming widely used for general purpose software development, there is an urgent need for analysis techniques to help GPU programmers write correct code. Techniques to analyse GPU kernels with respect to data races and barrier divergence would significantly speed up the GPU software development process, leading to shorter time-to-market for GPU-accelerated applications.\n\nIn this project we plan to design formal techniques for verifying race- and divergence-freedom for GPU kernels. To be adopted and trusted by industrial practitioners our techniques must be highly automatic, scalable, and based on rigorous semantic foundations.\n\nWe plan to achieve these aims by developing a rigorous GPU memory model specification, and a formal semantics for GPU kernel execution that makes no assumptions about the structure of the kernel to be analysed. Based on these semantic foundations, we will design a verification technique that aims to prove absence of data races and barrier divergence by generating a &quot;contract&quot; for the kernel: a machine-checkable proof that kernel execution cannot lead to these defects. Contract-based verification is modular - each kernel procedure is analysed separately - and thus scalable. We will design a template-based contract generation method that captures domain-specific knowledge about common GPU programming idioms. This will allow efficient verification of GPU kernels that use typical data access patterns. For more intricate kernels that implement highly optimised algorithms, we will design a method based on Craig interpolation. This method will construct a proof of race- and divergence-freedom up to a bounded execution depth, and then attempt to extract a general contract from this proof.\n\nThroughout, we will evaluate our methods using open source and industrial GPU kernels, including kernels provided by our industrial collaborators.","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/K011499/1","grantId":"EP/K011499/1","fundValue":"100057","fundStart":"2013-06-30","fundEnd":"2014-06-29","funder":"EPSRC","impactText":"  The results from this project have led to practical methods for analysing GPU kernels. This has had impact in the following ways:\n- Two UK companies, ARM and Imagination Technologies, are using the results of the project in their commercial tool chains as 3rd party plug-ins\n- The software arising from the project has been used to improve the reliability of computational benchmarks from Rightware, a Finnish company\n- The software arising from the project has been used to find defects in published software from Nvidia, AMD, and in a number of open source benchmarks, improving the quality of these suites\n- The techniques arising from the project have been incorporated in the material taught in the Software Reliability course at Imperial College London\n- Videos about the work on YouTube have received upwards of 2000 hits since April 2013 Digital/Communication/Information Technologies (including Software),Education Societal,Economic","person":"Alastair Francis Donaldson","coPersons":[],"organisation":"Imperial College London","findingsText":" Through this grant we have developed new methods for automatically finiding defects in software that has been designed to be accelerated on Graphics Processing Units (GPUs). This is valuable because GPUs are now routinely used to accelerate computation in applications used by society in general. The project has led to advances in the theory underlying parallel program analysis, as well as to practical tools that can help developers of GPU software. The software we have developed is open source and can be used by industrial practitioners to improve their development processes.\n\nWe have published papers about our work at high profile venues, making the results available to the research community for future exploitation.\n\nWe have build strong links with specific companies: ARM and Imagination Technologies, who will be able to exploit our research in their commercial products. Digital/Communication/Information Technologies (including Software),Education","dataset":"gtr"}