{"id":"E4CD7985-4A28-4896-87A4-32C2627C4732","title":"Toward an Industrial Strength Automatic Differentiation Product","abstractText":"Numerical simulation of complex real-world phenomena is a major challenge for almost all activities in science and engineering, particularly when it is desired not merely to model a process (such as airflow across the surface of a car or a wind turbine) but to optimise the process (for example, to adjust the shape of the surface so as to minimize the drag). \n\nTo do this efficiently for large problems, it is essential for the model to have access to numerical derivatives (sensitivities of the outputs with respect to inputs) that are accurate (free from coding, rounding and trunction errors) and computationally cheap. At present most users either provide hand-coded derivative routines, which are tedious to program and update, and prone to coding errors; or finite differences, which are expensive to compute and numerically inaccurate. \n\nAutomatic Differentiation (AD) is a set of techniques for transforming numerical modelling code mechanically so that it calculates the numerical sensitivities of the model values as well as the values themselves, at the same order of speed as hand-coded derivatives, and to the same precision. This is done by using the chain rule from calculus, but applied directly to floating point numerical values, rather than to symbolic expressions. \n\nThe so-called reverse, or adjoint, mode of AD can produce a complete set of sensitivities for a computer program evaluating a model, at a computational cost of order five times that of a single evaluation of the program itself - even if there are millions of input variables and sensitivities. However, achieving this requires the ability to make the program run backwards, recovering all the intermediate numerical values in the process, and it is this which requires the development and use of sophisticated software tools. \n\nAD techniques are still not widely used in modelling and optimisation, due in large part to a lack of suitable user-friendly general-purpose commercial-strength AD tools. \n\nCurrent AD tools work either by operator overloading or by source pre-processing. Operator overloading is reliable, but slow, and do not provide support for calls to specialist numerical library functions, such as linear algebra routines. Source pre-processing tools require a high user awareness of AD, produce code that is not easy for humans to understand, and have memory management issues.\n\nThe research compiler developed by the CompAD team with EPSRC support is an enhancement of the NAG Fortran95 compiler, and is still the world's only industrial strength compiler to have built-in support for AD. Embedding an overloading approach to AD within an existing high performance compiler gives the best of both worlds: the convenience of the overloading approach and the speed of source pre-processing. However the current compiler is a research tool, and requires expert assistance to configure and integrate with application code. Consequently the research version of the CompAD compiler is unsuitable in its present form for the majority of potential beneficiaries. \n\nThis follow-on proposal will extract the AD functionality from the CompAD compiler, integrate it with the NAGWare Fortran Library, and make the resulting prototype widely available. As well as providing an immediate benefit to many users, this prototype will be suitable for systematic market testing and development. The prototype will be used to capture user requirements for, and to underpin subsequent development of, a commercially viable software AD product that will work &quot;out-of-the-box&quot; on problems of moderate size.","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/J013358/1","grantId":"EP/J013358/1","fundValue":"101466","fundStart":"2012-11-01","fundEnd":"2014-01-31","funder":"EPSRC","impactText":"  Following successful completion of the second phase of the CompAD project in September 2008, the research compiler was re-purposed for various end-users, as consultancy work carried out by members of the CompAD research project team (including then-UH research fellow Jan Riehme, currently senior research scientist at Software Tools for Computational Engineering, RWTH-Aachen). \n\nMeanwhile NAG Ltd has made the CompAD compiler available on a commercial basis to its customers, including engineering and financial sector organisations. In response to customer requests, NAG took the commercial decision to develop AD versions of a number of mathematical library routines, using an enhanced version of the CompAD compiler. \n\nIn particular, NAG is already providing AD software and consultancy services based on the CompAD research to two major Tier 1 banks, who are using this software in real time to control risks on the futures market (option-swap decisions for high value amounts). The C++ tools involved were developed in partnership with RWTH-Aachen, building on the research pioneered by the CompAD project. They provide sensitivities (&quot;Greeks&quot;) more accurately and orders of magnitude faster than previously available tools. Aerospace, Defence and Marine,Construction,Environment,Healthcare,Manufacturing, including Industrial Biotechology,Transport Economic","person":"Bruce  Christianson","coPersons":[],"organisation":"University of Hertfordshire","findingsText":"","dataset":"gtr"}