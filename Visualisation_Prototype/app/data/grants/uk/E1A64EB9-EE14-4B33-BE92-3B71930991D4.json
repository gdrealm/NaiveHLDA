{"id":"E1A64EB9-EE14-4B33-BE92-3B71930991D4","title":"Haskell Types with Added Value","abstractText":"Good ideas, like lightning, take the most conductive path to earth. This one-year project takes advantage of fresh technological insights to narrow the spark-gap from theoretical research to the programming mainstream. In the last decade, dependent types --- capturing relative notions of data validity --- have jumped from logics and proof systems to programming. Prototype languages such as Cayenne, ATS, Agda and our own Epigram teach us how to characterize data precisely, but none has a coherent treatment of interaction in applications. This project will bring the basics of dependent types to application development now, not via a prototype, but with Haskell, a mature functional programming language with growing traction, thanks to the Glasgow Haskell Compiler (GHC), now developed under the Microsoft aegis. To make this jump, we must give practical answers to theoretical questions about the mathematical structures which underpin interactive and distributed systems. We must take the blackboard to the motherboard.\n\nThe tool which enables this project is our GHC preprocessor, the Strathclyde Haskell Enhancement (SHE), which mechanizes a partial translation from 'dependently typed Haskell' to Haskell as it stands. Up and running, SHE has already delivered the basics of our approach, leading to an article accepted in 2011 by the Journal of Functional Programming, and spurring deeper investigation of both the mathematics of dependently typed interaction and the engineering challenge of scaling up. Through theoretical research, library design and case study, we shall deliver progress across this spectrum through papers and open source software. GHC is adopting our functionality, but we do not need to wait. SHE can sustain low-cost exploration, putting an effective toolkit in users' hands now, as well as informing the future prospectuses both for dependent types in Haskell and for programming interaction in the next generation of functional languages. Haskellers recognize the need: Microsoft currently funds a PhD at Strathclyde on numerical dependency in Haskell types.\n\nThis project is, then, a double fix: it imports dependent types from tomorrow's languages to today's, and it allows us to guide tomorrow's dependently typed languages towards principled approaches to production software. We have proven track records in theoretical research and professional software development, key ideas to change programming for the better, and the skills to deliver world-leading research.","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/J014591/1","grantId":"EP/J014591/1","fundValue":"96582","fundStart":"2012-07-01","fundEnd":"2013-06-30","funder":"EPSRC","impactText":"  The research outcomes from this project have helped to direct the continuing evolution of the programming language Haskell, which is developed and widely used outside the academic sector. Working with Simon Peyton Jones (Microsoft Research) and Stephanie Weirich (University of Pennsylvania), we have helped Haskell absorb features from the research languages a generation ahead of it, facilitating the adoption of new techniques whilst retaining the existing broad developer base. Digital/Communication/Information Technologies (including Software) ","person":"C T McBride","coPersons":[],"organisation":"University of Strathclyde","findingsText":"","dataset":"gtr"}