{"id":"98A9D9B6-884F-44A2-86FA-204EFE286BE3","title":"Relaxed Memory Model Design for Theory and Practice","abstractText":"In the past few years, computer processors have reached a speed limit imposed\nby semiconductor physics. Before, increased performance came from running a\nsingle program faster, but now it comes from running more programs\nconcurrently, on multiple &quot;cores&quot;. Multi-core processors also support\nlow-power applications, and are becoming popular on mobile devices, such as\nsmart phones, where several slow cores use less battery power than a single\nfast core. To write software for multi-core processors, programmers must\ndecompose tasks into cooperating programs, ideally one per core. However, even\nexperts cannot write these programs without tremendous effort, and the\nprograms often have subtle bugs. Programmers have not been given the\nintellectual tools necessary for managing the complexity of multi-core\ncomputation.\n\nThis project focuses on a critical challenge posed by multi-core processors:\ntheir relaxed memory models. Conceptually, the processor's cores are connected\nto a single memory, and programs running on different cores communicate by\nwriting data to the memory for others to read. In reality, the processor\nachieves good performance by not giving the programmer a globally consistent\npicture of the memory: at any point in time the cores can appear to disagree\non its contents. The processor does make some guarantees about the memory, so\nthat the programmer can write working programs, but it carefully avoids making\nothers. A relaxed memory model specifies which guarantees are made and which\nare not. Our objectives are to improve the theory of relaxed memory models,\nand to apply this theory to a new model that is easier to understand in\npractice.\n\nMost of the time, programming in a high-level language should have advantages\nover programming in the processor's low-level assembly language: advantages\nin, for example, reliability, security, and cost of development. However, this\nis not the case with relaxed memory models: the high-level language is more\ncomplicated because it has to account for the variety of significantly\ndifferent processors that the high-level language can be compiled to, and it\nhas to account for the compiler's optimisations too. The primary tension is\nbetween usability/security (for example, that sensitive data will not be\nleaked by a malicious program forging pointers to the data) and efficiency,\nwith the latter driving existing designs. The Java Memory Model attempts to\ngive basic security guarantees, but several underlying flaws have been\ndiscovered. On the other extreme, the new C and C++ models make no attempt to\nprovide security guarantees. The design space for relaxed memory models has\nnot been thoroughly explored.\n\nIn this project, we will design a relaxed memory model for a high level\nlanguage that gives stronger guarantees to programmers, making it easier to\nwrite, reason about, and verify concurrent programs. Our approach to the\ndesign combines a focus on real-world concurrent algorithms, to ensure that it\nis practical, with mathematical rigor, to ensure that it supports robust\nreasoning principles that will ultimately help programmers to understand it\nand to write high quality concurrent software systems.","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/K040561/1","grantId":"EP/K040561/1","fundValue":"98537","fundStart":"2014-01-07","fundEnd":"2016-01-06","funder":"EPSRC","impactText":"","person":"Scott Alan Owens","coPersons":[],"organisation":"University of Kent","findingsText":"","dataset":"gtr"}