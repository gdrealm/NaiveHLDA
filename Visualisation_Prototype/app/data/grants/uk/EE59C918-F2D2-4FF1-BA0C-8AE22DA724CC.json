{"id":"EE59C918-F2D2-4FF1-BA0C-8AE22DA724CC","title":"Multiparty Session Types: Theory and Conversation-Oriented Programming","abstractText":"Driven by the industrial and social needs, communication is rapidlybecoming the central element of software development, as found in webservices, business protocols, multicore CPUs and corporateintegration. In this environment, a programmer will have hundreds ofcomputing nodes per application at her/his disposal, which will becomea norm in a few years: communication and concurrency is becomingcentral to computing. However a mature understanding on how software can best harness thepower and richness of this coming environment, is still lacking in thecomputing community, industry and academia alike. This current lackof the understanding --- hence lack of agreement --- on this issuewill lead to a dire confusion in programming, in modelling, inoptimisation technologies, and in the development of diverseinfrastructures including middle-ware. This project aims to contributeto the development of some of the key technical elements forharnessing the power of communication and concurrency in programming.The project centres on the idea of organising communication asstructured conversations, based on one of the most advanced theoriesin this area, the multiparty session types, recently introduced by thePIs. We develop a generalisation of the theory of multiparty sessiontypes, then apply the developed theory to a design and implementationof an extension of the well-known object-oriented language, Java,extending the code base which is also developed by the PIs.The resulting language, Java with multiparty session types, will beused to implement real-world complex financial/business protocols inthe two industry standards, ISO UNIFI (ISO TC68 WG4 ISO20022 UNIversalFinancial Industry message scheme) and W3C CDL (ChoreographyDescription Language). The theory of multiparty session types itselfwas motivated by the PIs' dialogue with key personnel of thesestandards. Through implementing advanced financial/business protocolsin the developed language, validator and compiler, not only can weexamine the practical usability of the developed theory vis-a-vis someof the most complex conversation patterns found in practice, but alsowe shall make it viable to use the developed technical ideas includingnotations and implementations as part of these standardisationefforts, for which the PIs have been working as official invitedmembers.","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/G015635/1","grantId":"EP/G015635/1","fundValue":"344294","fundStart":"2009-07-01","fundEnd":"2012-12-31","funder":"EPSRC","impactText":"  Development of an open source projects, Scribble at Red Hat and Savara at Cognizant; also applications to Ocean Observatories Initiative (NSF project in US for developing a large cyberinfrustructure for ocean observations). We taught our languages and their applications at several places in Europe, UK and US. Communities and Social Services/Policy,Digital/Communication/Information Technologies (including Software),Education,Security and Diplomacy Policy & public services","person":"Nobuko  Yoshida","coPersons":[],"organisation":"Imperial College London","findingsText":" Driven by the industrial and social needs, communication is rapidly becoming the central element of software development, as found in web services, business protocols, multicore CPUs and corporate integration. In this environment, a programmer will have hundreds of computing nodes per application at her/his disposal, which will become a norm in a few years: communication and concurrency is becoming central to computing. However a mature understanding on how software can best harness the power and richness of this coming environment, is still lacking in the computing community, industry and academia alike. This current lack of the understanding --- hence lack of agreement --- on this issue will lead to a dire confusion in programming, in modelling, in optimisation technologies, and in the development of diverse infrastructures including middle-ware. This project aimed to contribute to the development of some of the key technical elements for harnessing the power of communication and concurrency in programming.The project centred on the idea of organising communication as structured conversations, based on one of the most advanced theories in this area, the multiparty session types, recently introduced by the PIs. We developed a generalisation of the theory of multiparty session types, then apply the developed theory to a design and implementation of an extension of the well-known object-oriented language, extending the code base which is also developed by the PIs. The resulting language with multiparty session types, was used to implement real-world complex financial/business protocols and was used by our industry partners and a US project. The theory of multiparty session types itself was motivated by the PIs' dialogue with key personnel of the open standards such as WS-CDL. Through implementing advanced financial/business protocols in the developed language, validator and compiler, not only can we examine the practical usability of the developed theory vis-a-vis some of the most complex conversation patterns found in practice, but also we shall make it viable to use the developed technical ideas including notations and implementations as part of these standardisation efforts, for which the PIs were working as official invited members. We applied effectively to some of industry projects and products; and published over 50 articles during this grant. Development of an open source projects, Scribble at Red Hat and Savara at Cognizant; also applications to Ocean Observatories Initiative. Digital/Communication/Information Technologies (including Software),Education,Security and Diplomacy","dataset":"gtr"}