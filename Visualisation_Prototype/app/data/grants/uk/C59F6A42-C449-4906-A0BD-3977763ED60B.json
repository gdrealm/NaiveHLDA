{"id":"C59F6A42-C449-4906-A0BD-3977763ED60B","title":"Homotopy Type Theory: Programming and Verification","abstractText":"The cost of software failure is truly staggering. Well known \nindividual cases include the Mars Climate Orbiter failure \n(&pound;80 million), Ariane Rocket disaster (&pound;350 million), Pentium \nChip Division failure (&pound;300 million), and more recently the heartbleed \nbug (est. &pound;400 million). There are many, many more examples. Even worse, \nfailures such as one in the Patriot Missile System and another \nin the Therac-25 radiation system have cost lives. More generally, a \n2008 study by the US government estimated that faulty\nsoftware costs the US economy &pound;100 billion\nannually. \n\nThere are many successful approaches to software verification\n(testing, model checking etc). One approach is to find mathematical\nproofs that guarantees of software correctness. However, the\ncomplexity of modern software means that hand-written mathematical\nproofs can be untrustworthy and this has led to a growing desire for\ncomputer-checked proofs of software correctness. \nProgramming languages and interactive proof systems like Coq, Agda,\nNuPRL and Idris have been developed based on a formal system called\nMartin-L&ouml;f Type Theory. In these systems, we can not only write\nprograms, but we can also express properties of programs using types,\nand write programs to express proofs that our programs are correct.\nIn this way, both large mathematical theorems such as the Four Colour\nTheorem, and large software systems such as the CompCert C compiler\nhave been formally verified. However, in such large projects, the\nissue of scalability arises: how can we use these systems to build large\nlibraries of verified software in an effective way?\n\nThis is related to the problem of reusability and modularity: a\ncomponent in a software system should be replaceable by another which\nbehaves the same way even though it may be constructed in a completely\ndifferent way. That is, we need an &quot;extensional equality&quot; which is\ncomputationally well behaved (that is, we want to run programs using\nthis equality). Finding such an ty is a fundamental and\ndifficult problem which has remained unresolved for over 40 years.\n\nBut now it looks like we might have a solution! Fields medallist\nVladimir Voevodsky has come up with a completely different take on the\nproblem by thinking of equalities as paths such as those which occur\nin one of the most abstract branches of mathematics, namely homotopy\ntheory, leading to Homotopy Type Theory (HoTT). In HoTT, two objects\nare completely interchangeable if they behave the same way. However,\nmost presentations of HoTT involve axioms which lack computational\njustification and, as a result, we do not have programming languages\nor verification systems based upon HoTT. The goal of our project is\nto fix that, thereby develop the first of a new breed of HoTT-based\nprogramming languages and verification systems, and develop case\nstudies which demonstrate the power of HoTT to programmers and\nthose interested in formal verification.\n\nWe are an ideal team to undertake this research because i) we have\nunique skills and ideas ranging from the foundations of HoTT to the\nimplementation and deployment of programming language and verification\ntools; and ii) the active collaboration of the most important figures\nin the area (including Voevodsky) as well as industrial participation\nto ensure that we keep in mind our ultimate goal -- usable programming\nlanguage and verification tools.","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/M01729X/1","grantId":"EP/M01729X/1","fundValue":"93133","fundStart":"2015-03-30","fundEnd":"2019-03-29","funder":"EPSRC","impactText":"","person":"Nicola  Gambino","coPersons":[],"organisation":"University of Leeds","findingsText":"","dataset":"gtr"}