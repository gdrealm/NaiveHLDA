{"id":"93987D35-77ED-4606-AE1D-F540F21DFEF9","title":"Se-Ma-Match: Semantic Malware Matching","abstractText":"The flood of malware samples is predicted to grow into a deluge in\n2012, making the problem of maintaining a database of malware\nsignatures ever more difficult. For each new sample, it is important\nto determine the threat that it poses. \n\nIn response to this, dynamic malware analysis\ntools have been designed that execute the sample in a sandbox,\nmonitoring the actions of a sample. If these actions are similar\nto those of malware that has been already indexed in the database,\nthen one might draw conclusions regarding provenance and severity\nof the threat posed. If the sample does not match against known\nmalware, then it can be subject to manual scrutiny, using a dissembler\nsuch as IDA Pro.\n\nThis Linnaean approach to malware analysis is both natural and\nconvenient: it is natural to group malware into families that share\ncommon attributes; and it is provides a convenient way of assessing\nthreat. Yet the whole methodology is predicated on the accuracy\nwith which samples are characterised by their signatures. If a\nsample is assigned a signature that does not express its behaviour,\nthen samples that are behaviourally distinct can be erroneously\ngrouped together. Conversely, samples which behave the same, but\nappear different, can be accidentally placed in different groups.\n\nThe main problem with dynamic malware analysis tools is that they\nexecute the binary for a limited time, typically considering just\none path through the binary. This limits the actions that can be\nobserved, rendering the signature inaccurate for programs that\nreveal their true behaviour later. In addition, the dynamic approach\ncan miss infrequent actions or logic bombs. The dynamic approach is\nalso susceptible to timing attacks that detect a tracer to turn off\nsome action. Above all, the signatures are based solely and only\non those actions that are encountered during the trace.\n\nMore static approaches have been applied too, at one extreme using\nthe call graph of the binary itself for classification, and at the\nother deploying model checking techniques to search the paths through\ncall graph for signature behaviours that characterise known malware\nfamilies. Yet graph matching techniques are sensitive to control-flow\nobfuscation and model checking requires the signature behaviours\nto be known up-front and distilled into a temporal formula or an\nautomata.\n\nA middle ground is offered by abstract interpretation since it\nprovides a way to systematically consider all paths, while monitoring\na program for actions that inform the construction of the signature.\nAbstract interpretation provides a way to break the dichotomy between\nthe purely dynamic and the purely static approach to malware analysis\ninto a graduated continuum. Formally, purely static approach\n(a.k.a. a static analysis) can be derived from the purely dynamic\napproach (a.k.a. a tracer) by compositing a sequence of abstractions:\nif all n abstractions are applied the result is the static analysis;\nbut if the first m &lt; n abstractions are applied the result is a\nhybrid. The challenge is to find the hybrid that provides sufficient\npath coverage to undercover logic bombs yet is sufficiently robust\nto be used by practitioners in the security sector. The proposed\nproject will discover this sweet point by following two complementary\nlines of inquiry. Concrete traces will be abstracted to cover more\npaths and more actions (at UCL). Static analyses, which covers all\npaths, will be refined to avoid paths and actions that do not\nactually occur (at Kent). Thus UCL will add missing information\nto signatures (converging on the ideal signature from below) whilst\nKent will remove excess information from signatures (converging on\nthe ideal signature from above). By reflecting on the relative\nmerits of these approaches, we will draw conclusions on how to\nconstruct robust signatures for malware classification and thereby\nadvance the whole field.","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/K032585/1","grantId":"EP/K032585/1","fundValue":"245525","fundStart":"2013-10-14","fundEnd":"2016-10-13","funder":"EPSRC","impactText":"","person":"Andy  King","coPersons":[],"organisation":"University of Kent","findingsText":"","dataset":"gtr"}