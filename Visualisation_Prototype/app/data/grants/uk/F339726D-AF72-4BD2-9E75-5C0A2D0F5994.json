{"id":"F339726D-AF72-4BD2-9E75-5C0A2D0F5994","title":"Cooperative Reasoning for Automatic Software Verification","abstractText":"The proliferation of software across all aspects of modern life means that software failures can have significant economic, as well as social impact. The goal of being able to develop software that can be formally verified as correct with respect to its intended behaviour is therefore highly desirable. The foundations of such formal verification have a long anddistinguished history, dating back over fifty years. What hasremained more elusive are scalable verification tools that can deal with the complexities of software systems.However, times are changing, as reflected by a current renaissance within the formal software verification community -- both in industryas well as academia. A significant recent development has been Separation Logic, a logic which promotes scalable reasoning forpointer programs. Pointers are a powerful and widely usedprogramming mechanism, but developing and maintaining correctpointer programs is notoriously hard. In terms of verification tools, the majority of effort has gone into developing light-weight analysis techniques for separation logic, such as shape analysis. Shape analysis ignores the contentof data, focusing instead on how data is structured. While such light-weight properties can be extremely valuable to industry,ultimately a more comprehensive level of specification is calledfor, i.e. correctness specifications. For instance, the verificationof software libraries against agreed correctness standards couldprove highly valuable across a wide range of sectors. However,to verify such comprehensive specifications requires more heavy-weight analysis, i.e. theorem proving. Our proposal focuses on the development of tools which willsupport the automatic verification of correctness specificationswithin separation logic. In particular, we will investigate how light- and heavy-weight approaches can be optimally combined. We propose a cooperative approach, in which individual techniques combine their strengths, but crucially compensate for each other's weaknesses through the communication of partial results and failures. To achieve this level of cooperation we will use a theorem proving technique called proof planning, which has a proven track-record in building cooperative reasoning tools. We plan to combine the proof planning approach with existing off-the-shelf shape analysis tools developed by Peter O'Hearn's research group at Queen Mary University (London). Note that our cooperative approach will also enhance the existing shape analysis tools, i.e. make the tools extensible and thus more widely applicable. If our cooperative style of integration is successful, then it could have a significant impact on reducing the cost of developing highly reliable software.","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/F037597/1","grantId":"EP/F037597/1","fundValue":"304909","fundStart":"2008-02-01","fundEnd":"2011-05-31","funder":"EPSRC","impactText":"  It is still too early for the full impact of our findings to be known. However, the visualization aspects of our work has given rise to a further investigation as to how pictures can assist in understanding proof obligations within the context of software verification. This aspect of our work has been of interest to one of our industrial collaborators. Digital/Communication/Information Technologies (including Software) Economic","person":"Andrew  Ireland","coPersons":[],"organisation":"Heriot-Watt University","findingsText":" Pointers are widely used in the construction of software systems,\nthey provide a powerful mechanism for storing and manipulating\ndata within programs. However, developing and maintaining correct\nprograms that use pointers is notoriously hard. Adopting an integrated\napproach, our CORE (COoperative REasoning) project focused on the\nchallenge of verifying the correctness of pointer programs. Building\nupon a relatively new and novel programming logic called separation logic,\nwe investigated the mechanization of verification proofs for pointer\nprograms. Our goal was to develop techniques that support the automatic\nverification of so called functional properties of pointer programs.\nThat is, proving that a program delivers correct results. This involves\nreasoning about both the structure and content of the data, as well as\nhow it is manipulated during program execution. For a given functional\nproperty, the construction of the verification proofs will typically\nrequire the discovery of auxiliary properties, i.e. loop invariants\nand frame invariants. Such properties can be seen as expressing the\ninner workings of the program, and represent a major challenge to\nautomatic program proof. Our research directly addressed this challenge\nby developing an integrated approach to automating proof search and\nproperty discovery. We complement other research in this area, in\nparticular work on shape analysis which supports the verification of\nstructural properties of pointer programs. Specifically we used the\nshape analysis work as the starting point for our research, and see\nit as an integrated part of our approach. In terms of achievements,\nthe CORE Project:\n\n+ Developed a proof search strategy which we call mutation. Based\n on a principle of difference reduction, the strategy was designed\n to handle the kinds of separation logic proof obligations which\n arise when reasoning about the functionality of pointer programs\n that involve iteration (loops) or recursion.\n\n+ Developed a term synthesis technique for the automatic discovery of\n loop and frame invariants - properties that are essential when\n reasoning about programs that involve iteration and recursion\n respectively.\n\n+ Developed the CORE planner, a light-weight planning engine that\n supports the application of proof strategies, such as mutation. The\n CORE planner is also designed to cooperate with term synthesis,\n shape analysis, proof checking and graph rewriting tools in order\n to support automatic functional verification.\n\n+ Developed a prototype visualizer which allows us to graphically\n animate the execution of pointer programs specified in separation\n logic. While this was not part of our original work plan, it proved\n to be a very useful aid to debugging programs as well as an effective\n interface to separation logic.\n\n+ Evaluated our integrated approach to automating the verification\n of functional properties on a set of examples drawn in part from the\n publicly available Smallfoot (shape analysis) corpus. Given that\n Smallfoot focuses purely on shape, we added functional specifications\n in the form of pre- and postconditions. We also explored challenge\n examples from the literature, such as the &amp;amp;quot;frying pan&amp;amp;quot; example.\n\nAs well as the CORE system, we produced four refereed international workshop\npapers, and have a journal paper and a conference paper currently under review. \nDuring the CORE Project our research generated interest with ITI Techmedia, a Scottish\nGovernment sponsored technology transfer agency. Through a Software Integrity\nEngineering programme, we secured three ITI consultancy contracts which\ninvolved us in exploring the automatic verification of array bound properties within \nthe Java programming language, and resulted in the development of a proof-of-concept\nprototype analysis tool. This was applied research, and while informed by our\nCORE Project, was quite distinct. Our CORE tool-set could be integrated with other tools and techniques that support separation logic. From the perspective of our visualization tool for pointer programs, we believe that it could be used to support the teaching of data structures and algorithms. Digital/Communication/Information Technologies (including Software),Education","dataset":"gtr"}