{"id":"1615B3B5-DDDB-4062-9ED2-8A4DC9A4EC48","title":"Logical Relations for Program Verification","abstractText":"In an economy as relentlessly digital as the modern worldwide one, in\nwhich everything from toasters to interpersonal communications to\nglobal financial services are computerised, the need for formally\nverified software cannot be overestimated. Formal verification uses\nmathematical techniques to prove that programs actually perform the\ncomputations they are intended to perform (e.g., that text editors\nreally do save files when a SAVE command is issued or that automatic\npilots really do correctly execute flight plans) and also avoid\nperforming unintended ones (e.g., leaking credit card details or\nlaunching nuclear weapons without authorisation). Since programmers\nmake 15 to 50 errors per 1000 lines of code, and since repairing them\naccounts for some 80% of project expenses, the ever-increasing size\nand sophistication of programs makes formal verification increasingly\ncritical to modern software development.\n\nMathematical reasoning lies at the core of all formal verification,\nand so is crucial for building truly secure and reliable software.\nOne of the key techniques for formally verifying properties of\nsoftware systems uses logical relations. Logical relations provide a\nmeans of deriving properties of a software system directly from the\nsystem itself; as a result, they can be used to prove important\nproperties of programs, programming languages, and language\nimplementations. Logical relations have been developed for core\nfragments of many modern programming languages and verification\nsystems. They are currently extended to richer programming languages\nand properties by constructing plausible variants of the definitions\nof logical relations for appropriate core fragments and checking that\nthe mathematical theory goes through. But as languages and properties\nto be proved have become increasingly sophisticated and expressive,\nthis ad hoc approach has become both difficult and unsustainable. It\nhas also led to an enormous constellation of complicated and\nnon-reusable logical relations that &quot;work&quot; for particular language\nfeatures, rather than their principled and transferrable development\nfrom fundamental principles. In short, logical relations have\nstruggled to keep pace with developments in programming languages,\nwith the obvious consequences for security and reliability of software\nsystems.\n\nWe aim to revolutionise the landscape of logical relations by\nproviding framework for their development and use that is principled,\nconceptually simple, reusable, and uniform (rather than ad hoc). Our\nframework will be capable of both describing the wide array of logical\nrelations already used in existing applications and prescribing new\nlogical relations for future ones. It will be based on the\nmathematical concept of comprehension for a fibration, which has not \npreviously been identified as a key ingredient in\nthe construction of logical relations. Our use of it thus\ndistinguishes our framework from all other treatments of logical\nrelations in the literature. Comprehension allows explicit representation of logical properties of\nlanguages within those languages themselves. This means that our\nframework will be implementable, so we will produce a logic for\nderiving consequences of logical relations and a prototype\nimplementation of that logic in a modern interactive theorem\nprover. This will allow users to experiment with our framework, and\nallow their experiences with it to feed back into its\nfoundations. We will also apply our new framework for logical\nrelations to cutting-edge problems that are the focus of active\nresearch and for which there is presently no consensus on the way\nforward. Successful application of our framework will show that it can\nsolve problems that are the focus of active research, as\nwell as open up unanticipated new research directions. Conversely, the\npractical applications we pursue will raise challenges that prompt us\nto further refine its foundations","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/K023837/1","grantId":"EP/K023837/1","fundValue":"442444","fundStart":"2013-09-30","fundEnd":"2017-09-29","funder":"EPSRC","impactText":"","person":"Neil  Ghani","coPersons":[],"organisation":"University of Strathclyde","findingsText":"","dataset":"gtr"}