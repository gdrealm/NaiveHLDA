{"id":"DBFEF5BB-AA6A-4757-8A11-ED179DE4E484","title":"Coalgebraic Logic Programming for Type Inference","abstractText":"The main goal of typing is to prevent the occurrence of execution errors during the running of a program. \nMilner formalised the idea, showing that ``well-typed programs cannot go wrong''. In practice, type structures provide a fundamental technique of reducing programmer errors. At their strongest, they cover most of the properties of interest to the verification community.\n\nA major trend in the development of functional languages is improvement in expressiveness of the underlying type system, e.g., in terms of Dependent Types, Type Classes, Generalised Algebraic Types (GADTs), Dependent Type Classes and Canonical Structures. Milner-style decidable type inference does not always suffice for such extensions (e.g. the principal type may no longer exist), and deciding well-typedness sometimes requires computation additional to compile-time type inference.\n\nImplementations of new type inference algorithms include a variety of first-order decision procedures, notably Unification and Logic Programming (LP), Constraint LP, LP embedded into interactive tactics (Coq's eauto), and LP supplemented by rewriting.\n\nRecently, a strong claim has been made by Gonthier et al that, for richer type systems, LP-style type inference is more efficient and natural than traditional tactic-driven proof development.\n\nA second major trend is parallelism: the absence of side-effects makes it easy to evaluate sub-expressions in parallel. Powerful abstraction mechanisms of function composition and higher-order functions play important roles in parallelisation. Three major parallel languages are Eden (explicit parallelism) Parallel ML (implicit parallelism) and Glasgow parallel Haskell (semi-explicit parallelism). Control parallelism in particular distinguishes functional languages.\n\nType inference and parallelism are rarely considered together in the literature. As type inference becomes more sophisticated and takes a bigger role in the overall program development, sequential type inference is bound to become a bottle-neck for language parallelisation.\n\nOur new Coalgebraic Logic Programming (CoALP) offers both extra expressiveness (corecursion) and parallelism in one algorithm. We propose to use CoALP in place of LP tools currently used in type inference.\n\nWith the mentioned major developments in Corecursion, Parallelism, and Typeful (functional) programming it has become vital for these disjoint communities to combine their efforts: enriched type theories rely more and more on the new generation of LP languages; coalgebraic semantics has become influential in language design; and parallel dialects of languages have huge potential in applying common techniques across the FP/LP programming paradigm. This project is unique in bringing together local and international collaborators working in the three communities. The number of\nsupporters the project has speaks better than words about the timeliness of our agenda.\n\n\nThe project will impact on two streams of EPSRC's strategic plan: &quot;Programming Languages and Compilers&quot; and &quot;Verification and Correctness&quot;. The project is novel in aspects of Theory (coalgebraic study of (co)recursive computations arising in automated proof-search); Practice (implementation of the new language CoALP and its embedding in type-inference tools); and Methodology (Mixed corecursion and parallelism).","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/K028243/1","grantId":"EP/K028243/1","fundValue":"37114","fundStart":"2013-09-01","fundEnd":"2017-01-31","funder":"EPSRC","impactText":"  The co-Pi has continued to develop a programming language, CoALP, based on the abstract mathematical work I have done. Moreover, it has been a two-way process. So as she has developed questions arising from her more applied work, I have been developing abstract mathematics that addresses the questions and supports her more applied work. \n\nEssentially, the application is being used in Dundee to develop the new programming language. Digital/Communication/Information Technologies (including Software),Other Economic","person":"Anthony John Power","coPersons":[],"organisation":"University of Bath","findingsText":" I have worked holistically on this, with relevant research that was partially done before the grant began being completed, and with new research being commenced. \n\nThat has involved the completion of three papers together with editing a proceedings. The latter included one paper that was done during the grant period but written (necessarily) by the co-PI in Dundee. Of its nature, it amounted to testing what computation can actually be done as a result of the abstract mathematics. The other papers in the proceedings surrounded that, a general investigation of the combination of algebra and coalgebra with its interactions with logic and computation: note that the grant is inherently about using coalgebra to model logic programming. \n\nThe mathematical work of the grant, which is the part for which I am responsible, is inherently abstract, with a number of applications. So I investigated a somewhat different, but related application on my visit to Japan (funded by a Japanese university), where we used coalgebraic-style techniques to model &amp;quot;setoids&amp;quot;, which form a kind of logic that underlies the programming language Agda, which is broadly a sophisticated kind of logic programming language, reflecting a kind of extension to logic programming as we said we would study.\n\nI also used the underlying category theoretic techniques, in collaboration with colleagues in Bath, to model game semantics.\n\nAnd we finished work on our first journal paper that was directly on the narrow topic of the grant, and commenced research on further work. The latter involved dealing with the key underlying mathematical problem, that of providing a precise category theoretic semantics for &amp;quot;coinductive trees&amp;quot; and variants. That has not been written up yet; nor have the details been checked; but it has begun very well. I have given seminars on the work (upon invitation) at Cambridge, Oxford and Strathclyde over the past year. They were all received intelligently and well by substantial audiences. So I am optimistic that the mathematicians and theoretical computer scientists there will absorb the ideas into their own work. Digital/Communication/Information Technologies (including Software),Other","dataset":"gtr"}