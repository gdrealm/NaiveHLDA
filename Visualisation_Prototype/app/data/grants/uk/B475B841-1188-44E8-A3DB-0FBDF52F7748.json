{"id":"B475B841-1188-44E8-A3DB-0FBDF52F7748","title":"MACHINE LEARNING COALGEBRAIC AUTOMATED PROOFS","abstractText":"Some steps in formal reasoning may be statistical or inductive in nature.\nMany attempts to formalise or exploit this inductive or statistical nature of formal reasoning are related to methods of Neuro-Symbolic Integration, Inductive Logic and Relational Statistical Learning.\nThe proposal is focused on one statistical/inductive aspect of automated theorem proving -- proof-pattern recognition. \n\nHigher-order interactive theorem provers (e.g. HOL or Coq) have been successfully developed into \nsophisticated environments for mechanised proofs. \nWhether these provers are applied to big industrial tasks in software verification, or to formalisation\nof mathematical theories, a programmer may have to tackle thousands of lemmas and theorems of variable sizes and complexities.\nA proof in such languages is constructed by combining a finite number of tactics. Some proofs may yield the same pattern of tactics, \nand can be fully automated, and others may require a user's intervention.\nIn this case, manually found proof for one problematic lemma may serve as a template for several other lemmas needing a manual proof.\nAt present this kind of proof-pattern recognition and recycling is done by hand, and the ML-CAP project will look into methods to automate this. \n\nAnother issue is that unsuccessful attempts of proofs --- in the trial-and-error phase of proof-search, are normally discarded once the proof is found.\nConveniently, analysis of both positive and negative examples is inherent in statistical machine learning. And ML-CAP is going to exploit this.\n\nHowever, applying statistical machine-learning methods to analyse data coming from proof theory is a challenging task for several reasons. \nFormulae written in formal language have a precise, rather than a statistical nature. \nFor example, list(nil) may be a well-formed term, while list(nol) - not; although they may have similar patterns \nrecognisable by machine learning methods.\n\nAnother problem that arises when merging formal logic and statistical machine-learning algorithms is related to their computational complexity.\nMany essential logic algorithms are P-complete and inherently sequential (e.g., first-order unification), while neural networks and other similar devices \nare based on linear algebra and perform parallel computations.\n\nAs a solution to the outlined problems, the coalgebraic approach to automated proofs \nmay provide the right technique of abstraction allowing to analyse proof-patterns using machine learning methods. \nFirstly, coalgebraic computations lend themselves to concurrency, \nand this may be the key to obtaining adequate representation\nof the outlined problems.\nSecondly, they are based on the idea of repeating patterns of potentially infinite computations, rather than outputs of finite computations. \nThese patterns may be detected by methods of statistical pattern recognition. \n\nML-CAP is based upon a novel method of using statistical machine learning in analysis of formal proofs.\nIn summary, it provides algorithms for extracting those features from automated proofs that allow to detect proof patterns \n using statistical machine learning tools, such as neural networks.\nAs a result, neural networks can be trained to distinguish well-formed proofs from ill-formed; distinguish whether a proof belongs to a given family of proofs, \nand even make accurate predictions concerning potential success of a proof-in-progress. All three tasks have serious applications in automated reasoning. \nThe project will aim to generalise this method and develop it into a sound general technique for automated proofs. It will result in new methods useful \nfor a range of researchers in different areas, such as AI, Formal Methods, Coalgebra and Cognitive Science.","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/J014222/1","grantId":"EP/J014222/1","fundValue":"100268","fundStart":"2012-03-01","fundEnd":"2014-02-28","funder":"EPSRC","impactText":"  This work concerns the development of methods that can be used in formal verification of software and hardware.\n\nWe were the first to suggest and implement the statistical machine-learning tool that works on the background of user interface for Interactive Theorem Prover Coq and SSReflect.\n\nIt will impact the user interfaces for similar theorem provers, and has potential to speed up program development in higher-order languages.\n\nWe built ML4PG, a machine-learning extension for Proof General (a well-known interface for interactive theorem provers built in U.Edinburgh). ML4PG allows to gather proof statistics related to shapes of goals, sequences of applied tactics, and proof-tree structures from the libraries of interactive higher-order proofs written in Coq and SSReflect. The gathered data is clustered using the state-of-the-art machine learning algorithms available in machine-learning environmnents Matlab and Weka. ML4PG provides automated interfacing between Proof General and Matlab/Weka. The results of clustering are used by ML4PG to provide proof-hints in the process of interactive proof development, and, as a result, enhance user experience and speed up program development.\n\nBeneficiaries: Researchers and practioners using Interactive Theorem Proving\n\nContribution Method: This research designed and implemented the new tool ML4PG to be used in Proof General.\n\nThe key findings were disseminated to industry via related Industrial Proof of Concept SICSA grant (2013-2014). Digital/Communication/Information Technologies (including Software) Economic","person":"Ekaterina  Komendantskaya","coPersons":[],"organisation":"University of Dundee","findingsText":" The findings can be split into two big categories, that in turn split into subcategories, as follows:\n\n\n\n1. Machine-learning methods in automated and interactive theorem provers.\n\n1.1. We developed a new method of interfacing interactive theorem provers with state-of-the-art machine-learning engines, in real time.\n\n1.2 We developed a new method to dynamically extract statistical features from interactive proofs\n\n1.3 We developed a new method to run and post-process the results of machine-learning algorithms data-mining the computerised proof libraries\n\n1.4 We developed a method to automatically generate and prove new lemmas/theorems on the basis of automatically discovered statistics of old proofs.\n\n1.5 We developed a software tool ML4PG that data-mines Coq proofs, now it has become a standard package of Proof General software (Edinburgh University).\n\n1.5 We developed a new tool - ACL2(ml), implementing the above techniques in ACL2 language, and engaged with SICSA and industries to disseminate it further via Industrial Proof of Concept grant.\n\n\n\n2. Coalgebraic Logic Programming (CoALP)\n\n2.1. We further improved the parallel implementation of CoALP, and formally described its parallel features in two journal papers;\n\n2.2. We further developed guarded corecursion in CoALP;\n\n2.3 We issued a new version of CoALP, implemented in parallel language GoLang.\n\n2.4. the above work on CoALP gave rise to another EPSRC grant that implement CoALP in Type Inference in a range of Programming Languages Software and Hardware Verification in Coq and SSReflect (for ML4PG)\n\nSoftware and Hardware Verification in ACL2 (for ACL2(ml))\n\nCompilers, Type inference in Programming languages (for CoALP)\n All software and documentation are made publicly available here:\n\nProject progress summary: \n\nhttp://www.computing.dundee.ac.uk/staff/katya/MLCAP-man/\n\nML4PG software and documentation:\n\nhttp://www.computing.dundee.ac.uk/staff/katya/ML4PG/\n\nCoALP software and documentation:\n\nhttp://www.computing.dundee.ac.uk/staff/katya/CoALP/\n\nSpin-off of ML4PG work was ACL2(ml) work, funded by SICSA Industrial grant\n\nhttp://staff.computing.dundee.ac.uk/jheras/acl2ml/\n\nWe already know of several academic users of the ML4PG system. Digital/Communication/Information Technologies (including Software)","dataset":"gtr"}