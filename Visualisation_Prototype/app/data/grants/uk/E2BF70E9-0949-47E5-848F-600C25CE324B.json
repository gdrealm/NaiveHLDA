{"id":"E2BF70E9-0949-47E5-848F-600C25CE324B","title":"Game Semantics for Java Programs","abstractText":"Although software verification has made great strides in the last few decades, it is well understood that \nthere is still a significant gap between the need and the supply of verification methods and tools. \nIn particular, methods which enjoy high accuracy and can scale up to the size of realistic applications \nare extremely rare.\n\nIn this situation, methods stemming from the field of denotational semantics, which studies mathematical \nmodels of programs using elements of set theory and logic, seem naturally advantageous. The denotational \napproach uniquely combines two desirable features: abstraction and compositionality. Abstraction means \nthat the analysis focusses only on the observable aspects of program behaviour and is therefore bound \nto lead to concise models. On the other hand, compositionality allows for large verification tasks to be broken \ninto constituent parts, which can then be solved separately.\n\nThe aim of this project is to use game semantics in order to devise models, prototype methods and tools \nfor Java programs. Game semantics is a denotational theory describing computation as a game: a dialogue \nbetween the program and its environment which follows their exchange of data during program execution. \nGames strike a balance between abstract mathematical models and operational techniques. They precisely \ncapture observable program behaviour but also provide models which have concrete representations and \nare therefore amenable to algorihmic reasoning and automation. As a result, games constitute a natural \ncandidate for a refined semantics on which to base program verification.\n\nResearch in game semantics has recently made an important breakthrough towards the modelling of realistic \nprogramming languages, with the introduction of a novel strand of the theory called Nominal Game Semantics. \nNominal games pinpoint dynamic program behaviours involving the generation of new resources, such as \nreference names, objects, channels, etc. Moreover, research in automata over infinite alphabets has produced \nmachines with the potential of standing as algorithmic counterparts to nominal games. These developments \nplace us in a powerful position to attack Java, a mainstream language featuring such dynamic generative effects.\n\nOur goal is to make an important step in devising disciplined, systematic and automated methods that bear \nthe potential to address difficulties not tackled by the state of the art and eventually lead to the development \nof better software.","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/J019577/1","grantId":"EP/J019577/1","fundValue":"209084","fundStart":"2013-03-31","fundEnd":"2015-09-30","funder":"EPSRC","impactText":"","person":"Andrzej  Murawski","coPersons":["Nikos  Tzevelekos"],"organisation":"University of Warwick","findingsText":"","dataset":"gtr"}