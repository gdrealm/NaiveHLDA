{"id":"4A081474-0AF0-4330-9998-50F385909E70","title":"Automated Prover Generation","abstractText":"Reasoning is needed in many areas of computing from verification of programs, ontology reasoning for the semantic web, multi-agent systems to artificial intelligence and text mining and also other fields including mathematics, computational linguistics and philosophy. Successful automated theorem provers can ensure a much higher level of trust in complex mathematical proofs, they can enable us to automatically eliminate large classes of errors from software systems, and communication protocols, and they can be used to support the creation of and reasoning in large knowledge bases and web-based repositories.Implementing a fully-automated reasoning tool is a time-consuming and difficult undertaking. Currently, researchers requiring an automated reasoning tool for an application can develop a prover from scratch; they can extend and adapt an existing prover; they can use an existing prover for a wider logic into which their logic can be embedded, e.g., a prover for first-order logic or higher-order logic; or they can use logical frameworks or prover development platforms. While these approaches have led to impressive successes, all these approaches are difficult to adopt for users without significant expertise in logic and automated reasoning.As an alternative the aim of this project is to automatically generate implemented provers. The idea is that users will be able to define a logical formalisation of their application. This is automatically transformed first into a deduction calculus and then into an implemented prover. The way this is envisaged to work is similar to a compiler or interpreter, which automatically transforms a program written in a high-level programming language into machine-code or byte-code. The difference is that the input to the prover generator is not a set of instructions, but a high-level specification of a logic or a theory. This project will focus on the automated generation of tableau provers. The foundation for tableau prover generation will be a tableau calculus synthesis framework that we developed in recent work and have already applied to a number of logics. Based on this framework the software to be developed will be able to automatically generate a sound and complete tableau calculus for the given logic or theory. We believe that it is now possible to go further and develop software that will automatically generate an implemented automated theorem prover for this calculus. This will give non-expert users and developers the ability to obtain implemented provers with relative ease in a supported way. For the user crucially this removes the burden of being concerned with proving soundness, completeness and decidability results, and implementing or adapting a prover.We will extend the theoretical foundation of the framework in various ways in order to make it more comprehensive and extend the scope of tableau methods as decision procedures. A series of tools will be developed: a tableau prover generator program and auxiliary software to ensure reliability, correctness and efficiency of the generator and the generated provers. To allow for the rapid employment of the technology and receive feedback from users a first prototype will be completed and released within one year and two tutorials will be organised. Several case studies will be conducted with the prototype to identify important issues that may need to be changed and improved in the prototype. Areas where it is crucial to find optimisations are rule refinement, prover efficiency, and generalisation of the framework. To quantify the success of the project, the utility of the developed tools and the generated provers, the acceptance by users and the practical benefit of generated provers an evaluation will be conducted.Overall, automated prover generation is a new and difficult research problem, but we believe that it is now a real possibility that we intend to realise in this project.","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/H043748/1","grantId":"EP/H043748/1","fundValue":"410798","fundStart":"2010-05-01","fundEnd":"2014-03-31","funder":"EPSRC","impactText":"  Our results and methodology has been used in several major academic case studies, which has enhanced knowledge and shown the utility and generality of the methods.\n1. Various mainstream and non-mainstream description logics with emphasis on SHOI. Various specialisations of the blocking mechanism were defined and evaluated, and simulation of the standard blocking techniques was shown.\n2. Hybrid modal logic with counting quantifiers. Joint work with Michal Zawidzki from the University of Lodz, Poland.\n3. Linear temporal logic with Boolean constraints. Joint work with Clare Dixon and Boris Konev from the University of Liverpool. A method of dealing with fixpoints in the linear time temporal logic was developed and tested.\n4. Interrogative-epistemic logics for reasoning about questions and queries of multiple agents. Joint work with Stefan Minica from Amsterdam.\n5. Logics and algebras of hypergraphs with relevance to image processing. Collaboration with Dr. John Stell (Leeds University) and Dr David Rydeheard (University of Manchester). Digital/Communication/Information Technologies (including Software) Societal,Economic","person":"Renate  Schmidt","coPersons":[],"organisation":"The University of Manchester","findingsText":" Reasoning is needed in many subfields of computer science from verification of programs, ontology reasoning for the semantic web, multi-agent systems to artificial intelligence and text mining but also other fields including mathematics, computational linguistics and philosophy. Automated theorem provers can ensure a much higher level of trust in complex mathematical proofs, they can enable us to automatically eliminate large classes of errors from software systems, and communication protocols, Users and developers in the many application domains within which reasoning plays an important role will benefit from the free availability of the automated prover generation technology. Digital/Communication/Information Technologies (including Software)","dataset":"gtr"}