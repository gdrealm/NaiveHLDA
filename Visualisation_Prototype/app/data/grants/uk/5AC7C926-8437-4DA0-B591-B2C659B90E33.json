{"id":"5AC7C926-8437-4DA0-B591-B2C659B90E33","title":"Testing, Verifying, and Generating Software Patches Using Dynamic Symbolic Execution","abstractText":"A large fraction of the costs of developing and maintaining software is associated with detecting and fixing software errors. As a result, the last decade has seen a sustained research effort directed toward designing and developing techniques for automatically detecting software errors, with some of these techniques making their way into commercial and open-source tools. However, detecting an error is only the first step toward fixing it. In fact, many known errors remain unpatched due to the high cost required to diagnose and repair them, combined with the fear that patches are more likely to introduce failures compared to other types of code changes.\n\nThe goal of this research project is to address both of these problems, by devising novel techniques based on dynamic symbolic execution for:\n(1) automatically testing and verifying the correctness of software patches, and\n(2) (semi-)automatically generating candidate patches for software bugs.\n\nThe strength of dynamic symbolic execution lies in its ability to precisely model the behaviour of program paths using mathematical constraints. However, the cost associated with this level of precision is poor scalability. The number of paths in a program is usually exponential in the number of branches, which makes it difficult to scale the analysis to very large programs. However, by focusing the analysis on the incremental changes introduced by program patches, we hope to significantly reduce the cost of symbolic execution and significantly increase its applicability in practice. Furthermore, the ability to check software patches opens up the possibility of performing patch generation in an automatic or semi-automatic fashion. In particular, starting from the mathematical constraints gathered from a buggy execution path -- and with the potential addition of a manually-written patch template -- we plan to design techniques for generating a set of candidate patches resembling the ones that would be generated manually by developers.","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/J00636X/1","grantId":"EP/J00636X/1","fundValue":"287184","fundStart":"2012-05-31","fundEnd":"2015-07-31","funder":"EPSRC","impactText":"","person":"Cristian  Cadar","coPersons":[],"organisation":"Imperial College London","findingsText":"","dataset":"gtr"}