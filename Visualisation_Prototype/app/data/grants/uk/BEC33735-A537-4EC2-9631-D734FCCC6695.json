{"id":"BEC33735-A537-4EC2-9631-D734FCCC6695","title":"Compiling for Energy Efficiency in Multicore Memory Hierarchies","abstractText":"Over the past few years, processor manufacturers have switched from single core designs to multicore architectures. In these new devices, two or more processing cores are placed on a single chip and linked together to enable several applications to run at exactly the same time. Examples of current multicore architectures include the Intel Core 2 Quad and the Cell Broadband Engine.On each processing core, several threads of execution can run in parallel with each other. Each thread is simply a stream of instructions from a program that must be executed in a particular order so that a certain task is performed. For example, one thread might be loading up a web page in a browser whilst another is playing some music. Manufacturers are relying on this thread-level parallelism to maintain the performance gains that have been achieved in each new generation of processors over the last 40 years. However, power efficiency continues to be a major issue for the processor industry as manufacturers seek to maximise the usage of the transistors on-chip, delivering high performance with low energy.The cache hierarchy is one element of a multicore system where tackling these challenges can make a significant difference. A cache is a fast memory, usually on the same chip as the processing cores themselves. Each cache stores a copy of the frequently used instructions and data so that the processor has easy access to it, instead of having to wait for a slow, off-chip memory. The caches occupy a significant fraction of the total chip area and thus consume a large percentage of the total system power. Here also, threads interact with each other, competing for resources and consuming a significant amount of electrical energy.This proposal seeks to address these issues by using the compiler to drive energy efficiency. The compiler is the tool that converts a program from a human-readable format into the 1s and 0s that run on the actual machine. Along the way it performs some analysis and optimisation to make the program run as fast as possible. This proposal will consider the impact of compiler-inferred knowledge during compilation and runtime, enabling the generation of energy-efficient programs that can automatically influence energy saving in the underlying environment.The proposal will consider two complementary project themes: level 2 cache management and D-NUCA designs. The first will consider energy saving schemes that can place parts of the second level cache into low power sleep modes. The compiler will have the ability to use both state-preserving (i.e. the data is retained) and state-destroying (i.e. the data is lost) techniques and use the compiler to turn off parts of the cache at both a coarse granularity (e.g. each cache bank) and at a finer level too (e.g. cache lines). This work will consider the trade-offs between static energy savings and increased dynamic energy consumption through extra cache misses.The second topic in this research will consider an emerging cache architecture: D-NUCA (Dynamic Non-Uniform Cache Architecture) designs. As the name suggests, this type of cache has a variable latency to access different data within it. This proposal will develop a technique to influence the data management policy of the cache to maintain the high performance and flexibility of this paradigm, yet also provide opportunities for static energy reduction. Furthermore, the scheme will proactively leverage the existing data migration infrastructure to move certain information around the cache, when beneficial, for increased static energy savings.","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/H021000/1","grantId":"EP/H021000/1","fundValue":"99854","fundStart":"2010-03-01","fundEnd":"2011-01-01","funder":"EPSRC","impactText":"  Intel have evaluated the use of the developed scheme. Digital/Communication/Information Technologies (including Software) Economic","person":"Timothy Martin Jones","coPersons":[],"organisation":"University of Edinburgh","findingsText":" Within the field of microprocessor caching, we considered work in two directions. Firstly, we have looked at reducing the overheads of coherence with sparse directories. We have shown how you only need to track the locations of shared data within the system caches and can ignore private data. This allows increased performance and a reduction in power and network traffic. Secondly, we have considered moving data around in a dynamic non-uniform cache architecture (D-NUCA). We have developed simple schemes to predict which cores will need the data and proactively move it towards those cores before it is required. This brings performance improvements and reductions in access latency. Processor designers, when implementing their memory systems with sparse directories for cache coherence, can use the results of this research to reduce the overheads of their directories. Likewise, those implementing systems with NUCA caches can use our technique to speed up accesses to frequently-used data.\n Processor designers, when implementing their memory systems with sparse directories for cache coherence, can use the results of this research to reduce the overheads of their directories. Likewise, those implementing systems with NUCA caches can use our technique to speed up accesses to frequently-used data. Digital/Communication/Information Technologies (including Software)","dataset":"gtr"}