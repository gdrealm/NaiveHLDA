{"id":"554AD2A8-483E-4942-899B-ED6437A079FF","title":"CONSEQUENCER: Sequentialization-based Verification of Concurrent Programs with FIFO channels","abstractText":"The steady exponential increase in processor performance \nhas reached the inevitable turning point, at which it is no longer feasible to\nincrease the clock speeds of individual processors. To achieve\nhigher performance, processors now contain several cores that work in parallel.\nConsequently, concurrency has become an important aspect across many\nareas within computer science, such as algorithms, data structures, programming\nlanguages, software engineering, testing, and verification.\nConcurrent programs consist of several computations or threads that are\nactive at the same time and communicate through some control mechanism, such as\nlocks and shared variables, or message passing. Concurrent programming is difficult:\nprogrammers do not only have to guarantee the correctness\nof the sequential execution of each individual thread, they must also consider\nnondeterministic interferences from other threads. Due to these complex\ninteractions, considerable resources are spent to repair buggy concurrent\nsoftware.\n\nTesting remains \nthe most used (and often the only known) paradigm in industry to find errors,\neven though the inherently nondeterministic nature of the concurrent\nschedules causes errors that manifest rarely and are difficult to reproduce and repair.\nTesting is not effective in detecting such concurrency errors, as all\npossible executions of the programs have to be explored explicitly.\nConsequently, testing needs to be complemented by automated verification tools that\nenable detection of errors without explicitly (i.e. symbolically) exploring executions. \n\nOn the other hand, the state of the art for concurrent program verification lags behind that for sequential programs.\nHere, researchers have successfully explored a wide range of techniques and\ntools to analyse real-world sequential software.\nA recently proposed approach for symbolic verification of concurrent programs \ncalled sequentialization, consists in translating the concurrent program \ninto an equivalent sequential program so that\nverification techniques or tools that were originally designed for\nsequential programs can be reused without any changes.\n\nThis technique has been successfully used to discover bugs in existing software\nand has been implemented in several tools (e.g., Corral by Microsoft Research).\nHowever, existing sequentialization schemas do not support weak memory models, \nor distributed programs that use message passing. \n\nIn this proposal we address these weaknesses and plan the development of automated verification tools that enable detection of errors in concurrent programs in a systematic and symbolic way. More specifically, we will develop the theory, models and algorithms that underpin sequentialization of concurrent programs that use FIFO channels. This will enable us to capture within a single framework (1) concurrent programs that communicate through shared memory, for the variety of (weak) memory models that are implemented in today's computer architectures, and (2) distributed programs which use a message-passing communication style (i.e., the two most commonly used programming models for concurrency).\n\nA key deliverable of this project will be a set of automatic code-to-code translators, called ConSequencer, for C programs that use Pthread (for shared variables) and MPI (for distributed programs). This will serve as a concurrency plugin for any program verification tool designed for sequential programs. We will evaluate our solutions on publicly available benchmarks using a range of robust sequential verification tools for the C language.","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/M008991/1","grantId":"EP/M008991/1","fundValue":"98968","fundStart":"2015-03-01","fundEnd":"2016-08-31","funder":"EPSRC","impactText":"","person":"Gennaro  Parlato","coPersons":[],"organisation":"University of Southampton","findingsText":"","dataset":"gtr"}