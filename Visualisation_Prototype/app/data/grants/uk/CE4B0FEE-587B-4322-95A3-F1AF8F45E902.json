{"id":"CE4B0FEE-587B-4322-95A3-F1AF8F45E902","title":"Composing and decomposing ontologies: a logic-based approach","abstractText":"In computer science, ontologies are used to provide a common vocabulary for a domain ofinterest together with descriptions of the meaning of terms built from the vocabulary and relationships between them, like in an encycopedia. Ontologies in this sense are increasingly used in knowledge management systems, medical and bio-informatics and are set to play a key role in the semantic web and grid. In order to be computer-accessible, modern ontologies are formulated in an ontology language based on description logics (DLs) such as OWL. Current applications are leading to the development of large and complex ontologies (sometimes more than 300,000 different terms). Engineering and maintaining such ontologies is a complex task, and it has to be carried out with care for the ontology to be of use. It may involve a group of ontology engineers and domain experts co-operating in order to design the ontology, update it to reflect changes/developments in the domain, and integrate it with other ontologies so as to cover larger domains. Using a DL based ontology language such as OWL has two advantages: (1) they have an unambiguous semantics , which means that the meaning of terms is specified in unambiguous way, thereby enabling shared understanding of an ontology; and (2) we can make use of reasoning services of DL reasoners for ontology engineering and usage. The availability of these services has already changed how ontology engineers work. However, these services are not sufficient for engineering and maintaining large ontologies, especially in the collaborative case. Local changes to an ontology, and interactions between such changes, can have highly non-local effects that are currently unpredictable. The only time to examine these effects is after the changes have been made, in the light of all the proposed changes. And even then there are changes whose impact is not detectable using the current suite of reasoning services. To sum up, the state of ontology engineering is very similar to the state of software engineering before the advent of structured programming techniques: ontologies cannot be decomposed intosemantically distinct components, we cannot predict the scope of a (local) change, and how to re-use parts of ontologies or safely compose them are open problems. In software engineering,human documentation and rigorous process restrictions were put into place, as well as preliminary mechanisms for structuring programs. As these mechanisms have grown more sophisticated, they have led to new automated techniques for transforming programs for performance, understanding, and re-use. It has been convincingly argued that methodologies and algorithmic support for composing anddecomposing ontologies in a controlled way will be the key to supporting collaborative ontology engineering and re-use. More precisely, we plan to develop methodologies and algorithmic support for (T1) developing ontologies with interfaces (and acceptable restrictions on their usage) which guarantee that, if such an ontology is composed with other ontologies, it neither corrupts nor is corrupted by the ontologies they are composed with; (T2) evaluating the consequences of the composition of a set of given ontologies which may have been built in a completely unrestricted way; (T3) decomposing a large ontology into modules that can be edited in a controlled way.Above, terms such as ``in a controlled way'', ``corrupted ontology'', and ``consequence'' are deliberately left rather vague. Indeed, one goal of this project is to provide rigorous but practical and useful formal specifications of (T1)--(T3) above. It is only very recently that research in this direction has been carried out and the proposers have already made some pioneering contributions towards their actual development. The proposed approach is a continuation of this line of work, i.e., it is logic-based and founded on the notion of conservative extensions .","grantUrl":"http://gtr.rcuk.ac.uk/projects?ref=EP/E065155/1","grantId":"EP/E065155/1","fundValue":"307431","fundStart":"2007-10-01","fundEnd":"2010-09-30","funder":"EPSRC","impactText":"  Yes, they have been used: our notion of &quot;locality-based modules&quot; is supported by the OWL API, has been further extended, and is used in various ontology-based applications. Digital/Communication/Information Technologies (including Software),Healthcare,Manufacturing, including Industrial Biotechology,Pharmaceuticals and Medical Biotechnology Economic","person":"Ulrike  Sattler","coPersons":["Bijan  Parsia","Ian  Horrocks"],"organisation":"The University of Manchester","findingsText":" The idea of a &quot;module&quot; is standard in numerous areas: in construction, modules are used to build large constructs from small ones; in Software Engineering, modules encapsulate different aspects of programmes. In logic, modules would be very relevant but are not well understand: given a set of (logical) formulas, how can I chop this into smaller, coherent pieces that are only loosely connected to each other? We have investigated this and similar questions for a widely used family of logics (so-called Description Logics), designed suitable notions for logical modules, and developed algorithm to extract such modules. The have already been taken forward in that the notion of modules we have developed is supported by the OWL API, a widely used programme for interacting with OWL ontologies. We have also further extended our notion of modules and developed further tool support around it. Modules are now used in numerous ontology-based applications. Aerospace, Defence and Marine,Healthcare,Manufacturing, including Industrial Biotechology,Pharmaceuticals and Medical Biotechnology","dataset":"gtr"}